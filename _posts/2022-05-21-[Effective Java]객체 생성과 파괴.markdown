---
layout: post
title:  "[Effective Java]객체 생성과 파괴"
date:   2022-05-21 11:07:16 +0900
categories: EffectiveJava
---
# 객체 생성과 파괴

### 아이템 1
#### 정적 팩토리 메소드
팩토리 메소드란 객체를 생성하기 위한 디자인 패턴이다. 그런데 정적 팩토리 메소드는 GoF 디자인 패턴에서 설명하는 팩토리 메소드와는 전혀 다른 디자인 패턴이다. 디자인 패턴 중에는 이와 일치하는 패턴은 없다. 이 디자인은 **객체 생성의 역할을 하는 클래스 메서드**라는 디자인이다. 

왜 객체를 만드는데는 자바에서 제공하는 생성자가 있는데. 왜 정적 팩토리 메소드를 따로 만들어서 객체를 생성해야는지 의문이 생겼다. 

여기에는 다섯가지의 장점이 있다.

1. 이름을 가질 수 있다. 

2. 호출될 때마다 인스턴스를 새로 생성하지는 않아도 된다.

3. 하위 자료형 객체를 반환될 수 있다.

4. 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.

5. 정적 팩터리 매서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다.

장점이 있으면 단점이 있는법

1. 상송을 하려면 public이나 protected 생성자가 필요하니 정적 패터리 메소드만 제공하면 하위 클래스를 만들 수 없다.

2. 정적 팩터리 메서드는 프로그래머가 찾기 어렵다.

물론 기존으로 쓰이는 public 생성자 역시 쓰임새가 있으니, 정적 팩토리 메서드와 public 생성자의 장단점을 이해하고 사용하는 것이 좋고, 개발 취지에 따라 사용하는게 좋다. 